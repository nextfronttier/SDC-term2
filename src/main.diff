80c80
<     //cout << sdata << endl;
---
>     cout << sdata << endl;
96c96
<           * TODO: Calculate steering angle and throttle using MPC.
---
>           * TODO: Calculate steeering angle and throttle using MPC.
101,131c101,102
< 
<           vector<double> waypoints_x;
<           vector<double> waypoints_y;
< 
<           // transform waypoints to be from car's perspective
<           // this means we can consider px = 0, py = 0, and psi = 0
<           // greatly simplifying future calculations
<           for (int i = 0; i < ptsx.size(); i++) {
<             double dx = ptsx[i] - px;
<             double dy = ptsy[i] - py;
<             waypoints_x.push_back(dx * cos(-psi) - dy * sin(-psi));
<             waypoints_y.push_back(dx * sin(-psi) + dy * cos(-psi));
<           }
< 
<           double* ptrx = &waypoints_x[0];
<           double* ptry = &waypoints_y[0];
<           Eigen::Map<Eigen::VectorXd> waypoints_x_eig(ptrx, 6);
<           Eigen::Map<Eigen::VectorXd> waypoints_y_eig(ptry, 6);
< 
<           auto coeffs = polyfit(waypoints_x_eig, waypoints_y_eig, 3);
<           double cte = polyeval(coeffs, 0);  // px = 0, py = 0
<           double epsi = -atan(coeffs[1]);  // p
< 
<           double steer_value = j[1]["steering_angle"];
<           double throttle_value = j[1]["throttle"];
< 
<           Eigen::VectorXd state(6);
<           state << 0, 0, 0, v, cte, epsi;
<           auto vars = mpc.Solve(state, coeffs);
<           steer_value = vars[0];
<           throttle_value = vars[1];
---
>           double steer_value;
>           double throttle_value;
134,136c105
<           // NOTE: Remember to divide by deg2rad(25) before you send the steering value back.
<           // Otherwise the values will be in between [-deg2rad(25), deg2rad(25] instead of [-1, 1].
<           msgJson["steering_angle"] = steer_value/(deg2rad(25));
---
>           msgJson["steering_angle"] = steer_value;
146,154d114
<           for (int i = 2; i < vars.size(); i ++) {
<             if (i%2 == 0) {
<               mpc_x_vals.push_back(vars[i]);
<             }
<             else {
<               mpc_y_vals.push_back(vars[i]);
<             }
<           }
< 
165,169d124
<           for (double i = 0; i < 100; i += 3){
<             next_x_vals.push_back(i);
<             next_y_vals.push_back(polyeval(coeffs, i));
<           }
< 
175,176c130
<           //std::cout << msg << std::endl;
<           
---
>           std::cout << msg << std::endl;
